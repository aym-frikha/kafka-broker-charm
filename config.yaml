# Copyright 2021 pguimaraes
# See LICENSE file for licensing details.
options:
  distro:
    default: 'confluent'
    type: string
    description: |
      Only two values possible: apache or confluent. Defines if will use apache kafka
      or confluent distro to install kafka packages. Both distro and version
      should be set.
  confluent_license_topic:                    
    default: "_confluent-license"
    type: string
    description: |
      Topic used for storing Confluent license
  version:
    default: '6.1'
    type: string
    description: |
      Sets the kafka version for the given distro.
  cluster-count:
    default: 3
    type: int
    description: |
      The minimum amount of units to bootstrap the cluster
  service-restart-on-fail:
    default: False
    type: boolean
    description: |
      Restart services rightaway once they are detected in failed state.
  super-users:
    default: ""
    type: string
    description: |
      List of users to be added as super users with full admin permissions, example: User:mds;User:HTTP
      In case SASL is enabled, this list MUST CONTAIN all brokers' principals.
  install-method:
    default: 'package'
    type: string
    description: |
      There are two possible values: package or archive. If archive, it will upload the tarball set
      in the resource of this charm. Archive method is EXPERIMENTAL for this charm.
  sasl-protocol:
    default: ''
    type: string
    description: |
      Define which of the SASL protocols should be used for authentication. In the case of Zookeeper,
      only kerberos and digest methods are available.
  kerberos-admin-hostname:
    default: ''
    type: string
    description: |
      Set the kerberos admin hostname to authenticate with.
  kerberos-kdc-hostname:
    default: ''
    type: string
    description: |
      Set the kerberos kdc hostname to authenticate with.
  kerberos-protocol:
    default: ''
    type: string
    description: |
      Set the kerberos protocol. This will form the principal such as: {{protocol}}/<hostname>@<realm>
  kerberos-realm:
    default: ''
    type: string
    description: |
      Set the kerberos realm value.
  kerberos-domain:
    default: ''
    type: string
    description: |
      Defines the kerberos domain for the host: {{protocol}}/<name of the host>.<kerberos-domain>@<realm>
      The value set here should be the domain for the default gateway's IP.
  manual_restart:
    default: False
    type: boolean
    description: |
      If set to true, then no restarts will be applied and the cluster will be marked as blocked until
      restart action has been ran.
  authorizer-class-name:
    default: ''
    type: string
    description: |
      If unset, this option will not be added. Otherwise, use it to set the authorizer mechanism.
      For example: io.confluent.kafka.security.ldap.authorizer.LdapAuthorizer
      Will allow to set LDAP authorization for Confluent environment. More details:
      https://docs.confluent.io/platform/current/security/ldap-authorizer/quickstart.html
  cluster-auth-method:
    default: ''
    type: string
    description: |
      Sets interbroker authentication.
      As described on: https://docs.confluent.io/ansible/current/ansible-authorize.html
      For confluent distro, the options are: SASL PLAIN, SASL SCRAM, SASL GSSAPI, BEARER, and mTLS
      mTLS is considered EXPERIMENTAL.
  external-auth-method:
    default: ''
    type: string
    description: |
      Sets authentication for external listeners.
      As described on: https://docs.confluent.io/ansible/current/ansible-authorize.html
      For confluent distro, the options are: SASL PLAIN, SASL SCRAM, SASL GSSAPI, BEARER, and mTLS
      mTLS is considered EXPERIMENTAL.
  rbac-enabled:
    default: false
    type: boolean
    description: |
      **Confluent Only** Enables Confluent RBAC feature. MDS relation must be set across the platform
      components in order for rbac to be set correctly.
  oauth-public-key-path:
    default: "/var/ssl/private/public.pem"
    type: string
    description: |
      Path to the public key used to encrypt oauth tokens
  oauth-private-key-path:
    default: "/var/ssl/private/private.pem"
    type: string
    description: |
      Path to the private key to encrypt oauth tokens
  oauth-token-verify:
    default: False
    type: boolean
    description: |
      Validate the OAUTHBEARER token using a set of cert and key auto-generated.
  keystore-path:
    default: ''
    type: string
    description: |
      Path to the keystore
  truststore-path:
    default: ''
    type: string
    description: |
      Path to the truststore
  keystore-zookeeper-path:
    default: "/var/ssl/private/kafka_zookeeper_ks.jks"
    type: string
    description: |
      Path to the keystore for zookeeper
  truststore-zookeeper-path:
    default: "truststore-zookeeper-path"
    type: string
    description: |
      Path to the truststore for zookeeper
  regenerate-keystore-truststore:
    default: True
    type: boolean
    description: |
      If set to True, force charm to regenerate trust and keystore
      Setting to False is still EXPERIMENTAL
  clientAuth:
    default: False
    type: boolean
    description: |
      EXPERIMENTAL: this setting is still not enabled by default
  generate-root-ca:
    default: False
    type: boolean
    description: |
      If set, generate self-signed certificates to replace ssl* configs.
  ssl-zk-cert:
    default: ''
    type: string
    description: |
      Certificate for Zookeeper relation.
      Certificate with CA certificate chain to be used in base64
      -----BEGIN CERTIFICATE-----
      <Primary cert in PEM format for your-domain>
      -----END CERTIFICATE-----
      -----BEGIN CERTIFICATE-----
      <First intermediate CA certificate>
      -----END CERTIFICATE-----
      . . . . .
      (there may be more than one intermediate cert)
      . . . . .
      -----BEGIN CERTIFICATE-----
      <root-ca>
      -----END CERTIFICATE-----
      Pass the file with the certificate chain above as:
      $ juju config <your-charm> ssl_cert="$(cat <crt file> | base64 -w0)"
      Or in the bundle, using: include-base64://<path to crt file>
  ssl-zk-key:
    default: ''
    type: string
    description: |
      Key to be used in base64
  ssl_cert:
    default: ''
    type: string
    description: |
      Certificate with CA certificate chain to be used in base64
      -----BEGIN CERTIFICATE-----
      <Primary cert in PEM format for your-domain>
      -----END CERTIFICATE-----
      -----BEGIN CERTIFICATE-----
      <First intermediate CA certificate>
      -----END CERTIFICATE-----
      . . . . .
      (there may be more than one intermediate cert)
      . . . . .
      -----BEGIN CERTIFICATE-----
      <root-ca>
      -----END CERTIFICATE-----
      Pass the file with the certificate chain above as:
      $ juju config <your-charm> ssl_cert="$(cat <crt file> | base64 -w0)"
      Or in the bundle, using: include-base64://<path to crt file>
  ssl_key:
    default: ''
    type: string
    description: |
      Key to be used in base64
  user: 
    default: 'cp-kafka'
    type: string
    description: |
      User set for kafka broker services
  group: 
    default: 'confluent'
    type: string
    description: |
      Group set for kafka broker services
  sysctl:
    type: string
    description: |
      YAML formatted set of options to be used for sysctl
    default: |
      - vm.swappiness: 1
      - vm.dirty_background_ratio: 5
      - vm.dirty_ratio: 80
  listeners:
    type: string
    description: |
      YAML formatted listeners to be added to this deployment.
      Listeners 'internal', 'external' and 'controller' are set by default.
      Format:
        <listener-name>:  <IP / FQDN>:PORT
        <listener-name2>: endpoint:port 
        ...
    default: ''
  listener-sasl-protocol:
    type: boolean
    default: False
    description: |
      EXPERIMENTAL: to be coded later
  service-unit-overrides:
    default: ''
    type: string
    description: |
      YAML formatted set of key-value items to be added to the override.conf.
      Overrides the [Unit] section.
  service-overrides:
    type: string
    description: |
      YAML formatted set of key-value for [Service] section.
    default: ''
  service-environment-overrides:
    type: string
    description: |
      YAML formatted set of key-value to set as environment variables for the service.
    default: |
      KAFKA_HEAP_OPTS: "-Xms6g -Xmx6g -XX:MetaspaceSize=96m -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -XX:G1HeapRegionSize=16M -XX:MinMetaspaceFreeRatio=50 -XX:MaxMetaspaceFreeRatio=80"
  customize-failure-domain:
    type: boolean
    default: false
    description: |
      Setting this to true will tell Kafka to replicate across Juju's
      Availability Zone instead of specifically by host.
  replication-factor:
    type: int
    default: 3
    description: |
      Number of replicas to be distributed across brokers or AZs. 
      Charm will block if replication-factor > num brokers / AZs
  internal-cluster-domain:
    type: string
    default: ''
    description: |
      If set, hostname to be used on the internal listener of the cluster relation will be:
      $(hosname).<cluster-domain>
      Otherwise, charm will use reverse DNS to try resolve a valid hostname for the binding address
      of the relation.
  client-cluster-domain:
    type: string
    default: ''
    description: |
      If set, hostname to be used on the external listener of the cluster relation will be:
      $(hosname).<cluster-domain>
      Otherwise, charm will use reverse DNS to try resolve a valid hostname for the binding address
      of the relation.
  broker-cluster-domain:
    type: string
    default: ''
    description: |
      If set, hostname to be used on the controller listener of the cluster relation will be:
      $(hosname).<cluster-domain>
      Otherwise, charm will use reverse DNS to try resolve a valid hostname for the binding address
      of the relation.
  zookeeper-domain:
    type: string
    default: ''
    description: |
      If set, hostname to be used on zookeeper relation will be:
      $(hosname).<zookeeper-domain>
      Otherwise, charm will use reverse DNS to try resolve a valid hostname for the binding address
      of the relation.
  client-properties:
    type: string
    description: |
      YAML formatted list of options for client.properties file
    default: |
      default.api.timeout.ms: 20000
      request.timeout.ms: 20000
  data-log-device:
    type: string
    default: ""
    description: |
      Device to be used to store the data-log folder.
      This value cannot be changed post deployment of a unit.
      If unset, the folder will be created directly on the rootfs
  fs-options:
    type: string
    description: |
      Filesystem options for data-*-dir options.
      This value cannot be changed post deployment of a unit.
  data-log-dir:
    type: string
    default: |
      ext4: /var/lib/kafka_data
    description: |
      The list must be in the forme of:
      log.dirs: |
        <fs-type>: <folder-path>
      Only the first folder will be taken into consideration. The <fs-type> is used by the charm
      if log-device is also set.
      The folders in this option will form the log.dirs
  nagios_context:
    default: "juju"
    type: string
    description: |
      Used by the nrpe subordinate charms.
      A string that will be prepended to instance name to set the host name
      in nagios. So for instance the hostname would be something like:
        juju-myservice-0
      If you're running multiple environments with the same services in them
      this allows you to differentiate between them.
  nagios_servicegroups:
    default: "confluent-kafka"
    type: string
    description: |
      A comma-separated list of nagios servicegroups.
      If left empty, the nagios_context will be used as the servicegroup
  server-properties:
    type: string
    description: |
      YAML formatted list of server properties to be passed to the charm
    default: |
      group.initial.rebalance.delay.ms: 3000
      log.retention.check.interval.ms: 300000
      log.retention.hours: 168
      log.segment.bytes: 1073741824
      num.io.threads: 16
      num.network.threads: 8
      num.partitions: 1
      num.recovery.threads.per.data.dir: 2
      socket.receive.buffer.bytes: 102400
      socket.request.max.bytes: 104857600
      socket.send.buffer.bytes: 102400
      zookeeper.connection.timeout.ms: 18000
      confluent.support.metrics.enable: true
      confluent.support.customer.id: anonymous
  nagios_context:
    default: "juju"
    type: string
    description: |
      Used by the nrpe subordinate charms.
  jmx_exporter_version: 
    default: "v0.12.0"
    type: string
    description: |
      Value set for the version of the JMX Exporter.
  jmx_exporter_url:
    default: "https://repo1.maven.org/maven2/io/prometheus/jmx/jmx_prometheus_javaagent/{}/jmx_prometheus_javaagent-{}.jar"
    type: string
    description: |
      Maven's URL from where JMX jar can be downloaded.
      Replace the version value with "{}" for the versions.
  jmx-exporter-port: 
    default: 9404
    type: int
    description: |
      Port to be exposed by the exporter for prometheus.
  jmx_exporter_labels: 
    default: ""
    type: string
    description: |
      Comma-separated list of key=value tags.
  jmx_exporter_use_internal: 
    default: false
    type: boolean
    description: |
      Use the internal or advertised address in the prometheus relation.
      If False, the advertised address will be used.
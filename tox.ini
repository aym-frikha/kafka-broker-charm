[tox]
skipsdist = True
envlist = build, lint, unit
sitepackages = False
skip_missing_interpreters = False

[vars]
src_path = {toxinidir}/src
tst_path = {toxinidir}/tests
lib_path = {toxinidir}/lib
inter_lib_path = {toxinidir}/lib/charms/kafka_broker/v0
lib_commas_path = {[vars]inter_lib_path}/charmhelper.py,{[vars]inter_lib_path}/java_class.py,{[vars]inter_lib_path}/kafka_base_class.py,{[vars]inter_lib_path}/kafka_linux.py,{[vars]inter_lib_path}/kafka_listener.py,{[vars]inter_lib_path}/kafka_mds.py,{[vars]inter_lib_path}/kafka_prometheus_monitoring.py,{[vars]inter_lib_path}/kafka_relation_base.py,{[vars]inter_lib_path}/kafka_security.py
all_path = {[vars]src_path} {[vars]tst_path} {[vars]lib_path}

[testenv]
basepython = python3
setenv =
  PYTHONPATH = {toxinidir}:{toxinidir}/lib:{[vars]src_path}
  PYTHONBREAKPOINT=ipdb.set_trace
  PY_COLORS=1
passenv =
  PYTHONPATH
  HOME
  PATH
  CHARM_BUILD_DIR
  MODEL_SETTINGS
  HTTP_PROXY
  HTTPS_PROXY
  NO_PROXY
deps = -r{toxinidir}/requirements.txt

[testenv:lint]
description = Check code against coding style standards
deps =
    black
    codespell
    flake8
    flake8-docstrings
    flake8-copyright
    flake8-builtins
    pyproject-flake8
    pep8-naming
    isort
commands =
    codespell {[vars]lib_path} --ignore-words-list fpr,keyservers
    codespell . --skip .git --skip .tox --skip build --skip lib --skip venv --skip .mypy_cache --ignore-words-list fpr,keyservers
    # pflake8 wrapper supports config from pyproject.toml
    pflake8 {[vars]all_path}
    isort --check-only --diff {[vars]all_path}
    black --check --diff {[vars]all_path}

[testenv:unit]
description = Run unit tests
deps =
    pytest
    mock
    coverage[toml]
    responses
    -r{toxinidir}/requirements.txt
    deepdiff
commands =
    coverage run \
      --source={[vars]src_path},{[vars]lib_commas_path} \
      -m pytest -v --tb native -s {posargs} {[vars]tst_path}/unit
    coverage report
